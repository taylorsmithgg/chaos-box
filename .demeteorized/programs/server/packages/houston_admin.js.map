{"version":3,"sources":["houston:admin/lib/collections.coffee","houston:admin/lib/shared.coffee","houston:admin/lib/menu.coffee","houston:admin/server/publications.coffee","houston:admin/server/exports.coffee","houston:admin/server/methods.coffee"],"names":[],"mappings":"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","file":"/packages/houston:admin.js","sourcesContent":["root = exports ? this\n\nroot.Houston ?= {}\n\nHouston._collections ?= {}\n\nHouston._collections.collections = new Meteor.Collection('houston_collections')\n\nHouston._admins = new Meteor.Collection('houston_admins')\n\nHouston._user_is_admin = (id) ->\n  return id? and Houston._admins.findOne user_id: id\n","root = exports ? this\n\nroot.Houston ?= {}\n\nHouston._houstonize = (name) -> \"_houston_#{name}\"\n\nHouston._custom_method_name = (collection_name, method_name) ->\n  Houston._houstonize(\"#{collection_name}/#{method_name}\")\n\n# change _MAX_DOCS_TO_EXPLORE if you need us to explore more docs\nHouston._MAX_DOCS_TO_EXPLORE = 100\n\nHouston._get_fields_from_collection = (collection) ->\n  # TODO(AMK) randomly sample the documents in question\n  Houston._get_fields(collection.find().fetch())\n\nHouston._get_fields = (documents, options={}) ->\n  key_to_type = if options.exclude_id? then {} else {_id: 'ObjectId'}\n\n  find_fields = (document, prefix='') ->\n    for key, value of _.omit(document, '_id')\n      if typeof value is 'object'\n\n        # handle dates like strings\n        if value instanceof Date\n          full_path_key = \"#{prefix}#{key}\"\n          key_to_type[full_path_key] = \"Date\"\n\n        # recurse into sub documents\n        else\n          find_fields value, \"#{prefix}#{key}.\"\n      else if typeof value isnt 'function'\n        full_path_key = \"#{prefix}#{key}\"\n        key_to_type[full_path_key] = typeof value\n\n  for document in documents[..Houston._MAX_DOCS_TO_EXPLORE]\n    find_fields document\n\n  (name: key, type: value for key, value of key_to_type)\n\nHouston._get_field_names = (documents) ->\n  _.pluck(Houston._get_fields(documents), 'name')\n","root = exports ? this\n\nroot.Houston ?= {}\n\nHouston.menu = () ->\n  @.menu._add_menu_item item for item in arguments\n  return\n\nHouston.menu.dependency = new Deps.Dependency\n\nHouston.menu._menu_items = []\n\nHouston.menu._process_item = (item) ->\n  if item.type isnt 'link' and item.type isnt 'template'\n    throw new Meteor.Error 400, 'Can\\'t recognize type: ' + item\n\n  if item.type is 'link'\n    item.path = item.use\n  else if item.type is 'template'\n    item.path = \"#{Houston._ROOT_ROUTE}/actions/#{item.use}\"\n\n  return item\n\nHouston.menu._get_menu_items = ->\n  @dependency.depend()\n  @_process_item item for item in @_menu_items\n\nHouston.menu._add_menu_item = (item) ->\n  @_menu_items.push item\n  @dependency.changed()\n","root = exports ? this\nHouston._HIDDEN_COLLECTIONS = {'users': Meteor.users, 'meteor_accounts_loginServiceConfiguration': undefined}\nADDED_COLLECTIONS = {}\n# TODO: describe what this is, exactly, and how it differs from Houston._collections.\n\nHouston._publish = (name, func) ->\n  Meteor.publish Houston._houstonize(name), func\n\nHouston._setup_collection = (collection) ->\n  name = collection._name\n  return if name of ADDED_COLLECTIONS\n\n  Houston._setup_collection_methods(collection)\n\n  Houston._publish name, (sort, filter, limit, unknown_arg) ->\n    check sort, Match.Optional(Object)\n    check filter, Match.Optional(Object)\n    check limit, Match.Optional(Number)\n    check unknown_arg, Match.Any\n    unless Houston._user_is_admin @userId\n      @ready()\n      return\n    try\n      collection.find(filter, sort: sort, limit: limit)\n    catch e\n      console.log e\n\n  collection.find().observe\n    _suppress_initial: true  # fixes houston for large initial datasets\n    added: (document) ->\n      Houston._collections.collections.update {name},\n        $inc: {count: 1},\n        $addToSet: fields: $each: Houston._get_fields([document])\n    changed: (document) ->\n      Houston._collections.collections.update {name},\n        $addToSet: fields: $each: Houston._get_fields([document])\n    removed: (document) -> Houston._collections.collections.update {name}, {$inc: {count: -1}}\n\n  fields = Houston._get_fields_from_collection(collection)\n  c = Houston._collections.collections.findOne {name}\n  count = collection.find().count()\n  if c\n    Houston._collections.collections.update c._id, {$set: {count, fields}}\n  else\n    Houston._collections.collections.insert {name, count, fields}\n  ADDED_COLLECTIONS[name] = collection\n\nsync_collections = ->\n  Houston._admins.findOne()\n\n  collections = {}\n  for collection in (Mongo.Collection.getAll() ? [])\n    collections[collection.name] = collection.instance\n\n  _sync_collections = (meh, collections_db) ->\n    collection_names = (col.collectionName for col in collections_db \\\n      when (col.collectionName.indexOf \"system.\") isnt 0 and\n           (col.collectionName.indexOf \"houston_\") isnt 0)\n\n    collection_names.forEach (name) ->\n      unless name of ADDED_COLLECTIONS or name of Houston._HIDDEN_COLLECTIONS\n        Houston._setup_collection(collections[name]) if collections[name]?\n\n  bound_sync_collections = Meteor.bindEnvironment _sync_collections, (e) ->\n    console.log \"Failed while syncing collections for reason: #{e}\"\n\n  # MongoInternals is the 'right' solution as of 0.6.5\n  mongo_driver = MongoInternals?.defaultRemoteCollectionDriver() or Meteor._RemoteCollectionDriver\n  mongo_driver.mongo.db.collections bound_sync_collections\n\nMeteor.methods\n  _houston_make_admin: (user_id) ->\n    check user_id, String\n    # limit one admin\n    return if Houston._admins.findOne {'user_id': $exists: true}\n    Houston._admins.insert {user_id}\n    sync_collections() # reloads collections in case of new app\n    return true\n\n# publish our analysis of the app's collections\nHouston._publish 'collections', ->\n  unless Houston._user_is_admin @userId\n    @ready()\n    return\n  Houston._collections.collections.find()\n\n# TODO address inherent security issue\nHouston._publish 'admin_user', ->\n  Houston._admins.find {}\n\nMeteor.startup ->\n  sync_collections()\n","# Functions that Houston makes available to the app\nroot = exports ? this\n\n# Let Houston know about a collection manually, as an alternative\n# to the current autodiscovery process\nHouston.add_collection = (collection) ->\n  # TODO options arg can be used to configure admin UI like Django does\n  Houston._setup_collection(collection)\n\n# Hide a collection that is not wanted in Houston\nHouston.hide_collection = (collection) ->\n  Houston._HIDDEN_COLLECTIONS[collection._name] = collection\n  col = Houston._collections.collections.findOne({name: collection._name})\n  Houston._collections.collections.remove(col) if col?\n","# shared meteor methods\nrequire_admin = (func) ->\n  -> func.apply(@, arguments) if Houston._user_is_admin @userId\n\nHouston.methods = (collection, raw_methods) ->\n  collection_name = collection.name or collection._name or collection\n  method_names = _(raw_methods).keys()\n  Houston._collections.collections.update({name: collection_name}, {$set: {method_names}})\n\n  methods = {}\n  for func_name, func of raw_methods\n    methods[Houston._custom_method_name(collection_name, func_name)] = require_admin(func)\n\n  Meteor.methods methods\n\nHouston._setup_collection_methods = (collection) ->\n  name = collection._name\n  methods = {}\n  methods[Houston._houstonize \"#{name}_insert\"] = require_admin (doc) ->\n    check doc, Object\n    collection.insert(doc)\n\n  methods[Houston._houstonize \"#{name}_update\"] = require_admin (id, update_dict) ->\n    check id, Match.Any\n    check update_dict, Object\n    if collection.findOne(id)\n      collection.update(id, update_dict)\n    else\n      id = collection.findOne(new Meteor.Collection.ObjectID(id))\n      collection.update(id, update_dict)\n\n    \"#{collection._name} #{id} saved successfully\"\n\n  methods[Houston._houstonize \"#{name}_delete\"] = require_admin (id) ->\n    check id, Match.Any\n    if collection.findOne(id)\n      collection.remove(id)\n    else\n      id = collection.findOne(new Meteor.Collection.ObjectID(id))\n      collection.remove(id)\n\n  Meteor.methods(methods)\n"]}