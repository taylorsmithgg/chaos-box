{"version":3,"file":"/packages/dburles:factory.js","sources":["dburles:factory/lib/factory.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,mB;;AAEA,kD;AACA,mB;AACA,+B;AACA,+B;AACA,uB;AACA,E;;AAEA,yD;AACA,8D;AACA,yB;AACA,E;;AAEA,8B;AACA,gC;AACA,+E;AACA,iB;AACA,E;;AAEA,qD;AACA,kC;AACA,gB;AACA,gC;AACA,0B;;AAEA,uC;AACA,wC;AACA,qC;;AAEA,gF;AACA,8D;;AAEA,kB;;AAEA,mD;AACA,gE;AACA,qC;AACA,uB;AACA,sC;AACA,Q;AACA,4B;AACA,yB;AACA,I;AACA,E;AACA,uC;AACA,yC;AACA,oC;AACA,qC;AACA,yC;AACA,uC;AACA,kE;AACA,uC;AACA,8E;AACA,mE;AACA,+E;AACA,wC;AACA,wC;AACA,O;AACA,M;AACA,kC;AACA,iC;;AAEA,gD;AACA,O;AACA,I;;AAEA,2B;;AAEA,2B;AACA,qF;AACA,qF;AACA,kG;AACA,G;;AAEA,2B;AACA,gB;AACA,E;;AAEA,uC;AACA,gD;AACA,wC;AACA,4C;AACA,gB;AACA,E;;AAEA,6C;AACA,gC;AACA,8D;AACA,0C;;AAEA,qD;AACA,e;AACA,K;;AAEA,gB;AACA,E;;AAEA,6C;AACA,gC;AACA,qE;AACA,E;;AAEA,wC;AACA,2B;AACA,c;AACA,E","sourcesContent":["var factories = {};\n\nFactory = function(name, collection, attributes) {\n  this.name = name;\n  this.collection = collection;\n  this.attributes = attributes;\n  this.afterHooks = [];\n};\n\nFactory.define = function(name, collection, attributes) {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = function(name) {\n  var factory = factories[name];\n  if (! factory) throw new Error(\"Factory: There is no factory named \" + name);\n  return factory;\n};\n\nFactory.build = function(name, attributes, options) {\n  var factory = Factory.get(name);\n  var base = {};\n  attributes = attributes || {};\n  options = options || {};\n\n  // tie ins for collection init method\n  if (_.has(factory.collection, 'init'))\n    base = factory.collection.init();\n\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved\n  attributes = _.extend(base, factory.attributes, attributes);\n\n  var result = {};\n\n  // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n  var makeRelation = function(name) {\n    if (options.insert)\n      return Factory.create(name)._id;\n    else\n      // fake an id on build\n      return Random.id();\n  };\n  \n  var walk = function(record, object) {\n    _.each(object, function(value, key) {\n      // is this a Factory instance?\n      if (value instanceof Factory) {\n        value = makeRelation(value.name);\n      } else if (_.isFunction(value)) {\n        // does executing this function return a Factory instance?\n        var fnRes = value.call(result);\n        value = (fnRes instanceof Factory) ? makeRelation(fnRes.name) : fnRes;\n      // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n      \n      var modifier = { $set: {} };\n      modifier.$set[key] = value;\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, attributes);\n\n  // tie ins for validation\n  if (_.has(factory.collection, 'isValid') && ! factory.collection.isValid(result)) {\n    throw new Error('Factory: Invalid Document (' + factory.collection._name + ') ' +\n      EJSON.stringify(result) + ' Errors: ' + EJSON.stringify(factory.collection.errors(result)));\n  }\n\n  result._id = Random.id();\n  return result;\n};\n\nFactory._create = function(name, doc) {\n  var collection = Factory.get(name).collection;\n  var insertId = collection.insert(doc);\n  var record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = function(name, attributes) {\n  attributes = attributes || {};\n  var doc = Factory.build(name, attributes, { insert: true });\n  var record = Factory._create(name, doc);\n\n  _.each(Factory.get(name).afterHooks, function(cb) {\n    cb(record);\n  });\n\n  return record;\n};\n\nFactory.extend = function(name, attributes) {\n  attributes = attributes || {};\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n\nFactory.prototype.after = function(fn) {\n  this.afterHooks.push(fn);\n  return this;\n};\n"]}