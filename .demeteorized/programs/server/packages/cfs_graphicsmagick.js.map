{"version":3,"file":"/packages/cfs:graphicsmagick.js","sources":["cfs:graphicsmagick/gm.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,uF;AACA,sE;;AAEA,+B;AACA,+B;AACA,2B;;AAEA,iB;AACA,wF;AACA,E;;AAEA,2B;AACA,wB;;AAEA,2B;AACA,6B;AACA,mD;;AAEA,4E;AACA,oD;;AAEA,uE;AACA,uD;AACA,qC;;AAEA,0C;AACA,8C;AACA,+B;;AAEA,uC;AACA,wB;AACA,W;AACA,0C;AACA,iD;;AAEA,mC;AACA,uE;;AAEA,+D;;AAEA,4D;AACA,sD;AACA,0C;AACA,4B;AACA,iD;AACA,wD;;AAEA,qC;AACA,sE;;AAEA,2D;;AAEA,K;AACA,G;AACA,C;;;AAGA,sC;AACA,sB;AACA,qB;AACA,c;AACA,8E;AACA,a;AACA,M;AACA,iF;AACA,4D;AACA,M;AACA,U;AACA,wD;AACA,kD;AACA,oE;AACA,M;AACA,kF;AACA,M;AACA,yB;AACA,4E;AACA,gD;AACA,yC;AACA,4C;;AAEA,yB;;AAEA,Q;AACA,qB;;AAEA,uB;AACA,4B;AACA,gB;AACA,U;AACA,iD;AACA,6D;AACA,qB;AACA,G;;AAEA,wB;AACA,C","sourcesContent":["//wrap gm() object with an object that exposes the same methods, with the addition of a\n//.save() method that overwrites the FS.File's .buffer with the result\n\nvar nodegm = Npm.require('gm');\nvar path = Npm.require('path');\nvar fs = Npm.require('fs');\n\ngm = function() {\n  throw new Error('cfs:Graphicsmagic could not find \"graphicsMagick\" or \"imageMagick\"');\n};\n\nvar graphicsmagick = false;\nvar imagemagick = false;\n\n// Split the path by : or ;\n// XXX: windows is not tested\nvar binaryPaths = process.env['PATH'].split(/:|;/);\n\n// XXX: we should properly check if we can access the os temp folder - since\n// gm binaries are using this and therefor may fail?\n\n// XXX: we could push extra paths if the `gm` library check stuff like:\n// $MAGIC_HOME The current version does not check there\n// $MAGICK_HOME (GraphicsMagick docs)\n\n// We check to see if we can find binaries\nfor (var i = 0; i < binaryPaths.length; i++) {\n  var binPath = binaryPaths[i];\n\n  // If we have not found GraphicsMagic\n  if (!graphicsmagick) {\n    // Init\n    var gmPath = path.join(binPath, 'gm');\n    var gmExePath = path.join(binPath, 'gm.exe');\n\n    // Check to see if binary found\n    graphicsmagick = fs.existsSync(gmPath) || fs.existsSync(gmExePath);\n\n    if (graphicsmagick) console.log('=> GraphicsMagick found');\n\n    // If GraphicsMagic we dont have to check for ImageMagic\n    // Since we prefer GrapicsMagic when selecting api\n    if (!graphicsmagick && !imagemagick) {\n      // Init paths to check\n      var imPath = path.join(binPath, 'convert');\n      var imExePath = path.join(binPath, 'convert.exe');\n\n      // Check to see if binary found\n      imagemagick = fs.existsSync(imPath) || fs.existsSync(imExePath);\n\n      if (imagemagick) console.log('=> ImageMagick found');\n\n    }\n  }\n}\n\n\nif (!graphicsmagick && !imagemagick) {\n        // Both failed\n        console.warn(\n'WARNING:\\n' +\n'cfs:graphicsmagick could not find \"graphicsMagic\" or \"imageMagic\" on the\\n' +\n'system.\\n' +\n'\\n' +\n'I just checked PATH to see if I could find the GraphicsMagick or ImageMagic\\n' +\n'unix/mac os/windows binaries on your system, I failed.\\n' +\n'\\n' +\n'Why:\\n' +\n'1. I may be blind or naive, help making me smarter\\n' +\n'2. You havent added the path to the binaries\\n' +\n'3. You havent actually installed GraphicsMagick or ImageMagick\\n' +\n'\\n' +\n'*** Make sure \"$PATH\" environment is configured \"PATH:/path/to/binaries\" ***\\n' +\n'\\n' +\n'Installation hints:\\n' +\n'* Mac OS X \"brew install graphicsmagick\" or \"brew install imagemagick\"\\n' +\n'* Linux download rpm or use packagemanager\\n' +\n'* Centos \"yum install GraphicsMagick\"' +\n'* Windows download the installer and run');\n\n  gm.isAvailable = false;\n\n} else {\n  // Rig the gm scope\n\n  if (graphicsmagick) {\n    // Prefer graphicsmagick\n    gm = nodegm;\n  } else {\n    // Use imageMagick - we subclass for the user\n    var imageMagick = nodegm.subClass({ imageMagick: true });\n    gm = imageMagick;\n  }\n\n  gm.isAvailable = true;\n}\n"]}