{"version":3,"file":"/packages/cfs:reactive-property.js","sources":["cfs:reactive-property/reactive-property.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oB;AACA,8D;;AAEA,8B;;AAEA,gB;AACA,yB;AACA,uB;AACA,E;;AAEA,G;AACA,gB;AACA,6E;AACA,2E;AACA,G;AACA,kD;AACA,I;AACA,qD;AACA,kB;AACA,yE;;AAEA,sC;AACA,c;AACA,+E;AACA,kB;AACA,M;AACA,4B;;AAEA,gC;;AAEA,6B;AACA,oB;AACA,8B;AACA,I;;AAEA,K;AACA,kC;AACA,Y;AACA,W;AACA,8C;AACA,kC;AACA,S;AACA,M;AACA,yB;AACA,mB;AACA,sB;AACA,I;;AAEA,K;AACA,wD;AACA,wB;AACA,Y;AACA,W;AACA,8C;AACA,uB;AACA,S;AACA,M;AACA,8B;AACA,+B;AACA,yB;AACA,qB;AACA,K;AACA,I;;AAEA,K;AACA,4D;AACA,iD;AACA,Y;AACA,W;AACA,8C;AACA,mB;AACA,yB;AACA,S;AACA,M;AACA,2B;AACA,0B;AACA,mB;AACA,I;;AAEA,K;AACA,4D;AACA,iD;AACA,Y;AACA,W;AACA,8C;AACA,mB;AACA,wB;AACA,S;AACA,M;AACA,2B;AACA,0B;AACA,mB;AACA,I;;AAEA,K;AACA,+D;AACA,kF;AACA,6E;AACA,Y;AACA,W;AACA,8C;AACA,sB;AACA,kC;AACA,S;AACA,M;AACA,iC;AACA,uC;AACA,sB;AACA,Y;AACA,wB;AACA,K;AACA,I;;AAEA,K;AACA,uC;AACA,Y;AACA,W;AACA,8C;AACA,wC;AACA,S;AACA,M;AACA,8B;AACA,yB;AACA,qC;AACA,I;;AAEA,K;AACA,qC;AACA,Y;AACA,W;AACA,8C;AACA,sC;AACA,S;AACA,M;AACA,8B;;AAEA,E","sourcesContent":["// #ReactiveProperty\n// A simple class that provides an reactive property interface\n\n_noopCallback = function() {};\n\n_nonReactive = {\n  changed: _noopCallback,\n  depend: _noopCallback\n};\n\n/**\n  * @constructor\n  * @param {any} defaultValue Set the default value for the reactive property\n  * @param {boolean} [reactive = true] Allow the user to disable reactivity\n  *\n  * This api should only be in the internal.api.md\n  */\nReactiveProperty = function(defaultValue, reactive) {\n  var self = this;\n  var _deps = (reactive === false)? _nonReactive : new Deps.Dependency();\n\n  /** @property ReactiveProperty.value\n    * @private\n    * This contains the non reactive value, should only be used as a getter for\n    * internal use\n    */\n  self.value = defaultValue;\n\n  self.onChange = function() {};\n\n  self.changed = function() {\n    _deps.changed();\n    self.onChange(self.value);\n  };\n\n  /**\n    * @method ReactiveProperty.get\n    * Usage:\n    * ```js\n    *   var foo = new ReactiveProperty('bar');\n    *   foo.get(); // equals \"bar\"\n    * ```\n    */\n  self.get = function() {\n    _deps.depend();\n    return self.value;\n  };\n\n  /**\n    * @method ReactiveProperty.set Set property to value\n    * @param {any} value\n    * Usage:\n    * ```js\n    *   var foo = new ReactiveProperty('bar');\n    *   foo.set('bar');\n    * ```\n    */\n  self.set = function(value) {\n    if (self.value !== value) {\n      self.value = value;\n      self.changed();\n    }\n  };\n\n  /**\n    * @method ReactiveProperty.dec Decrease numeric property\n    * @param {number} [by=1] Value to decrease by\n    * Usage:\n    * ```js\n    *   var foo = new ReactiveProperty('bar');\n    *   foo.set(0);\n    *   foo.dec(5); // -5\n    * ```\n    */\n  self.dec = function(by) {\n    self.value -= by || 1;\n    self.changed();\n  };\n\n  /**\n    * @method ReactiveProperty.inc increase numeric property\n    * @param {number} [by=1] Value to increase by\n    * Usage:\n    * ```js\n    *   var foo = new ReactiveProperty('bar');\n    *   foo.set(0);\n    *   foo.inc(5); // 5\n    * ```\n    */\n  self.inc = function(by) {\n    self.value += by || 1;\n    self.changed();\n  };\n\n  /**\n    * @method ReactiveProperty.getset increase numeric property\n    * @param {any} [value] Value to set property - if undefined the act like `get`\n    * @returns {any} Returns value if no arguments are passed to the function\n    * Usage:\n    * ```js\n    *   var foo = new ReactiveProperty('bar');\n    *   foo.getset(5);\n    *   foo.getset(); // returns 5\n    * ```\n    */\n  self.getset = function(value) {\n    if (typeof value !== 'undefined') {\n      self.set(value);\n    } else {\n      return self.get();\n    }\n  };\n\n  /**\n    * @method ReactiveProperty.toString\n    * Usage:\n    * ```js\n    *   var foo = new ReactiveProperty('bar');\n    *   foo.toString(); // returns 'bar'\n    * ```\n    */\n  self.toString = function() {\n    var val = self.get();\n    return val ? val.toString() : '';\n  };\n\n  /**\n    * @method ReactiveProperty.toText\n    * Usage:\n    * ```js\n    *   var foo = new ReactiveProperty('bar');\n    *   foo.toText(); // returns 'bar'\n    * ```\n    */\n  self.toText = self.toString;\n\n};\n"]}