{"version":3,"sources":["prinzdezibel:accounts-guest/accounts-guest.js","prinzdezibel:accounts-guest/accounts-guest-server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,mB;AACA,kD;AACA,yF;AACA,C;AACA,mD;AACA,gF;AACA,C;;;;;;;;;;;;;;;;;;;ACNA,8C;AACA,sC;AACA,wB;AACA,2C;AACA,G;AACA,uF;AACA,a;AACA,E;;;AAGA,gB;AACA,wC;AACA,oD;AACA,0C;AACA,kB;AACA,K;;AAEA,gD;AACA,sC;AACA,sB;AACA,iB;AACA,kD;AACA,2F;AACA,kB;AACA,2B;AACA,O;AACA,K;AACA,oB;AACA,mC;AACA,qB;AACA,8B;AACA,kC;AACA,U;AACA,sB;AACA,gC;AACA,S;;AAEA,4C;AACA,K;;AAEA,gE;AACA,oC;AACA,wD;AACA,iC;AACA,G;AACA,G","file":"/packages/prinzdezibel:accounts-guest.js","sourcesContent":["AccountsGuest = {};\nif (typeof AccountsGuest.forced === \"undefined\") {\n\tAccountsGuest.forced = true; /*default to making loginVisitor automatic, and on logout*/\n}\nif (typeof AccountsGuest.enabled === \"undefined\") {\n\tAccountsGuest.enabled = true; /* on 'false'  Meteor.loginVisitor() will fail */\n}\n","Accounts.removeOldGuests = function (before) {\n  if (typeof before === 'undefined') {\n    before = new Date();\n    before.setHours(before.getHours() - 1);\n  }\n  var res = Meteor.users.remove({createdAt: {$lte: before}, 'profile.guest': 'guest'});\n  return res;\n};\n\n\nMeteor.methods({\n  newGuestLoginToken: function (email) {\n    /* if explicitly disabled, happily do nothing */\n    if (AccountsGuest.enabled === false) {\n      return null;\n    }\n\n    var count = Meteor.users.find().count() + 1;\n    var guestname = \"guest-#\" + count;\n    var userId = null;\n    if ( email) {\n      // Important: Only hand out guest accounts!!\n      var guest = Meteor.users.findOne({ \"emails.address\": email, \"profile.guest\": true });\n      if (guest) {\n        userId = guest._id;\n      }\n    }\n    if (! userId ) {\n        // create new guest account\n        var guest = {\n          username: guestname,\n          profile: { guest: true }\n        };\n        if ( email ) {\n            guest.email = email;\n        }\n\n        userId = Accounts.createUser(guest);\n    }\n\n    var newStampedToken = Accounts._generateStampedLoginToken();\n    newStampedToken.when = new Date;\n    Accounts._insertLoginToken(userId, newStampedToken);\n    return newStampedToken.token;\n  }\n});\n"]}