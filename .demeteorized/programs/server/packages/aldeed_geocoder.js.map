{"version":3,"sources":["aldeed:geocoder/geocoder.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,4C;;AAEA,0B;AACA,8C;AACA,uC;AACA,C;;AAEA,kD;AACA,kB;AACA,2B;AACA,+B;AACA,uB;AACA,oB;AACA,E;;AAEA,gD;AACA,uF;AACA,+B;AACA,E;;AAEA,0E;AACA,iB;AACA,8F;AACA,wC;AACA,U;AACA,uD;AACA,G;AACA,E;;AAEA,iD;AACA,uF;AACA,gC;AACA,E;;AAEA,2E;AACA,iB;AACA,8F;AACA,yC;AACA,U;AACA,wD;AACA,G;AACA,E","file":"/packages/aldeed_geocoder.js","sourcesContent":["var geocoder = Npm.require('node-geocoder');\n\n// backwards compatibility\nif (typeof Meteor.wrapAsync === \"undefined\") {\n  Meteor.wrapAsync = Meteor._wrapAsync;\n}\n\nGeoCoder = function geoCoderConstructor(options) {\n  var self = this;\n  self.options = _.extend({\n    geocoderProvider: 'google',\n    httpAdapter: 'http'\n  }, options || {});\n};\n\nvar gc = function (address, options, callback) {\n  var g = geocoder.getGeocoder(options.geocoderProvider, options.httpAdapter, options);\n  g.geocode(address, callback);\n};\n\nGeoCoder.prototype.geocode = function geoCoderGeocode(address, callback) {\n  if (callback) {\n    callback = Meteor.bindEnvironment(callback, function (error) { if (error) throw error; });\n    gc(address, this.options, callback);\n  } else {\n    return Meteor.wrapAsync(gc)(address, this.options);\n  }\n};\n\nvar rv = function (lat, lng, options, callback) {\n  var g = geocoder.getGeocoder(options.geocoderProvider, options.httpAdapter, options);\n  g.reverse(lat, lng, callback);\n};\n\nGeoCoder.prototype.reverse = function geoCoderReverse(lat, lng, callback) {\n  if (callback) {\n    callback = Meteor.bindEnvironment(callback, function (error) { if (error) throw error; });\n    rv(lat, lng, this.options, callback);\n  } else {\n    return Meteor.wrapAsync(rv)(lat, lng, this.options);\n  }\n};"]}