{"version":3,"sources":["reactioncommerce:reaction-braintree/server/register.coffee","reactioncommerce:reaction-braintree/server/braintree.coffee","reactioncommerce:reaction-braintree/common/collections.coffee","reactioncommerce:reaction-braintree/common/routing.coffee","reactioncommerce:reaction-braintree/lib/braintree.coffee"],"names":[],"mappings":"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","file":"/packages/reactioncommerce:reaction-braintree.js","sourcesContent":["ReactionCore.registerPackage\n  name: 'reaction-braintree' # usually same as meteor package\n  autoEnable: false # auto-enable in dashboard\n  settings: # private package settings config (blackbox)\n    mode: false\n    merchant_id: \"\"\n    public_key: \"\"\n    private_key: \"\"\n  registry: [\n    # all options except route and template\n    # are used to describe the\n    # dashboard 'app card'.\n    {\n      provides: 'dashboard'\n      label: 'Braintree'\n      description: \"Braintree Payment for Reaction Commerce\"\n      icon: 'fa fa-credit-card' # glyphicon/fa\n      cycle: '3' # Core, Stable, Testing (currently testing)\n      container: 'dashboard'  #group this with settings\n    }\n    # configures settings link for app card\n    # use 'group' to link to dashboard card\n    {\n      route: 'braintree'\n      provides: 'settings'\n      container: 'dashboard'\n    }\n    # configures template for checkout\n    # paymentMethod dynamic template\n    {\n      template: 'braintreePaymentForm'\n      provides: 'paymentMethod'\n    }\n  ]\n  # array of permission objects\n  permissions: [\n    {\n      label: \"Braintree\"\n      permission: \"dashboard/payments\"\n      group: \"Shop Settings\"\n    }\n  ]\n","Braintree = Npm.require('braintree')\nFiber = Npm.require(\"fibers\")\nFuture = Npm.require(\"fibers/future\")\n\nMeteor.methods\n  #submit (sale, authorize)\n  braintreeSubmit: (transactionType, cardData, paymentData) ->\n    accountOptions = Meteor.Braintree.accountOptions()\n    if accountOptions.environment is \"production\"\n      accountOptions.environment = Braintree.Environment.Production\n    else\n      accountOptions.environment = Braintree.Environment.Sandbox\n\n    gateway = Braintree.connect accountOptions\n\n    paymentObj = Meteor.Braintree.paymentObj()\n    if transactionType is \"authorize\" then paymentObj.options.submitForSettlement = false\n    paymentObj.creditCard = Meteor.Braintree.parseCardData(cardData)\n    paymentObj.amount = paymentData.total\n\n    fut = new Future()\n    @unblock()\n\n    gateway.transaction.sale paymentObj, Meteor.bindEnvironment((error, result) ->\n      if error\n        fut.return\n          saved: false\n          error: err\n      else if not result.success\n        fut.return\n          saved: false\n          response: result\n      else\n        fut.return\n          saved: true\n          response: result\n      return\n    , (e) ->\n      ReactionCore.Events.warn e\n      return\n    )\n    fut.wait()\n\n  # capture (existing authorization)\n  braintreeCapture: (transactionId, captureDetails) ->\n    accountOptions = Meteor.Braintree.accountOptions()\n    if accountOptions.environment is \"production\"\n      accountOptions.environment = Braintree.Environment.Production\n    else\n      accountOptions.environment = Braintree.Environment.Sandbox\n\n    gateway = Braintree.connect accountOptions\n\n    fut = new Future()\n    @unblock()\n    gateway.transaction.submit_for_settlement transactionId, captureDetails, Meteor.bindEnvironment((error, result) ->\n      if error\n        fut.return\n          saved: false\n          error: error\n      else\n        fut.return\n          saved: true\n          response: result\n      return\n    , (e) ->\n      ReactionCore.Events.warn e\n      return\n    )\n    fut.wait()\n","###\n#  Meteor.settings.braintree =\n#    mode: false  #sandbox\n#    merchant_id: \"\"\n#    public_key: \"\"\n#    private_key: \"\"\n#  see: https://developers.braintreepayments.com/javascript+node/reference\n###\n\nReactionCore.Schemas.BraintreePackageConfig = new SimpleSchema([\n  ReactionCore.Schemas.PackageConfig\n  {\n    \"settings.mode\":\n      type: Boolean\n      defaultValue: false\n    \"settings.merchant_id\":\n      type: String\n      label: \"Merchant ID\"\n    \"settings.public_key\":\n      type: String\n      label: \"Public Key\"\n    \"settings.private_key\":\n      type: String\n      label: \"Private Key\"\n  }\n])\n\nReactionCore.Schemas.BraintreePayment = new SimpleSchema\n  payerName:\n    type: String\n    label: \"Cardholder name\",\n    regEx: /^\\w+\\s\\w+$/\n  cardNumber:\n    type: String\n    min: 16\n    label: \"Card number\"\n  expireMonth:\n    type: String\n    max: 2\n    label: \"Expiration month\"\n  expireYear:\n    type: String\n    max: 4\n    label: \"Expiration year\"\n  cvv:\n    type: String\n    max: 4\n    label: \"CVV\"\n\n\nReactionCore.Schemas.BraintreePayment.messages\n  \"regEx payerName\": \"[label] must include both first and last name\"\n","Router.map ->\n  @route 'braintree',\n    controller: ShopAdminController\n    path: 'dashboard/settings/braintree',\n    template: 'braintree'\n    waitOn: ->\n      return ReactionCore.Subscriptions.Packages","Meteor.Braintree =\n  accountOptions: ->\n    settings = ReactionCore.Collections.Packages.findOne(name: \"reaction-braintree\").settings\n    if settings?.mode is true then environment = \"production\" else environment = \"sandbox\"\n    options =\n      environment: environment\n      merchantId: settings?.merchant_id || Meteor.settings.braintree.merchant_id\n      publicKey: settings?.public_key || Meteor.settings.braintree.public_key\n      privateKey: settings?.private_key || Meteor.settings.braintree.private_key\n    return options\n\n  #authorize submits a payment authorization to Braintree\n  authorize: (cardData, paymentData, callback) ->\n    Meteor.call \"braintreeSubmit\", \"authorize\", cardData, paymentData, callback\n    return\n\n  # TODO - add a \"charge\" function that creates a new charge and captures all at once\n\n  capture: (transactionId, amount, callback) ->\n    captureDetails =\n      amount: amount\n\n    Meteor.call \"braintreeCapture\", transactionId, captureDetails, callback\n    return\n\n  #config is for the braintree configuration settings.\n  config: (options) ->\n    @accountOptions = options\n    return\n\n  paymentObj: ->\n    amount: \"\"\n    options:\n      submitForSettlement: true\n\n  #parseCardData splits up the card data and puts it into a braintree friendly format.\n  parseCardData: (data) ->\n    cardholderName: data.name\n    number: data.number\n    expirationMonth: data.expirationMonth\n    expirationYear: data.expirationYear\n    cvv: data.cvv\n\n  # This needs work to support multi currency\n  # Braintree uses merchant ids that must be preconfigured for each currency\n  # See: https://developers.braintreepayments.com/javascript+node/sdk/server/transaction-processing/create#specifying-merchant-account\n  parseCurrencyData: (data) ->\n"]}