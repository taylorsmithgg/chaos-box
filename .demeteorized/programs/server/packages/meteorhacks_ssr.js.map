{"version":3,"file":"/packages/meteorhacks:ssr.js","sources":["meteorhacks:ssr/lib/overrides.js","meteorhacks:ssr/lib/template.js","meteorhacks:ssr/lib/dynamic.js","meteorhacks:ssr/lib/api.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,8C;AACA,4C;AACA,sC;AACA,wB;AACA,iB;AACA,E;;AAEA,4D;AACA,qC;AACA,uD;AACA,yD;AACA,iE;AACA,8D;AACA,8B;AACA,K;;AAEA,kC;AACA,8B;AACA,4B;AACA,O;AACA,K;;AAEA,c;AACA,E;;AAEA,2C;AACA,yB;AACA,0C;AACA,iD;AACA,6C;AACA,qD;AACA,4B;AACA,E;;AAEA,6B;AACA,mC;AACA,kB;AACA,G;;AAEA,qB;AACA,4C;AACA,wD;AACA,yB;AACA,Y;AACA,iB;AACA,K;AACA,G;AACA,C;;AAEA,+C;AACA,kD;AACA,kD;AACA,kC;;AAEA,gC;AACA,gB;AACA,G;AACA,2D;AACA,E;;;;;;;;;;;;;;;;;;AC1DA,qD;AACA,0B;;AAEA,wE;AACA,wC;AACA,yB;AACA,gE;AACA,+G;AACA,+D;AACA,G;AACA,E;;AAEA,qD;AACA,wD;AACA,kD;AACA,kD;AACA,yC;AACA,6C;AACA,wC;AACA,sC;AACA,e;AACA,G;AACA,wD;AACA,0B;;AAEA,kD;AACA,iE;;AAEA,gE;AACA,E;;AAEA,4D;AACA,yD;AACA,8C;;AAEA,E;;;;;;;;;;;;;;;;;;ACnCA,oE;AACA,kB;AACA,yD;AACA,iB;AACA,wE;AACA,kC;AACA,6F;AACA,G;;AAEA,iD;AACA,a;AACA,+B;AACA,sC;AACA,G;;AAEA,+C;AACA,iD;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;AClBA,wC;AACA,mB;AACA,mC;AACA,yC;AACA,oE;AACA,C;;AAEA,S;;AAEA,2C;AACA,+D;AACA,mD;AACA,0C;;AAEA,oC;AACA,E;;AAEA,wD;AACA,uD;AACA,qC;AACA,iB;AACA,iD;AACA,G;;AAEA,2C;AACA,kF;AACA,qD;;AAEA,yC;AACA,E","sourcesContent":["// we don't need autorun to go through Tracker\nBlaze.View.prototype.autorun = function(f) {\n  var handler = {stop: function() {}};\n  f.call(this, handler);\n  return handler;\n};\n\nSpacebars.With = function (argFunc, contentFunc, elseFunc) {\n  var argVar = new Blaze.ReactiveVar;\n  var view = Blaze.View('Spacebars_with', function () {\n    return Blaze.If(function () { return argVar.get(); },\n                    function () { return Blaze.With(function () {\n                      return argVar.get(); }, contentFunc); },\n                    elseFunc);\n  });\n\n  view.onViewCreated(function () {\n    this.autorun(function () {\n      argVar.set(argFunc());\n    });\n  });\n\n  return view;\n};\n\n// if we get a cursor from a templateHelper\n// we need fetch the data\n// observering us useless and throw errors\nvar originalLookup = Blaze.View.prototype.lookup;\nBlaze.View.prototype.lookup = function(key) {\n  var helper = originalLookup.apply(this, arguments);\n  return wrapHelper(helper);\n};\n\nfunction wrapHelper(helper) {\n  if(typeof helper != 'function') {\n    return helper;\n  }\n\n  return function() {\n    var res = helper.apply(this, arguments);\n    if(res && typeof res.observeChanges == 'function') {\n      return res.fetch();\n    } else {\n      return res;\n    }\n  }\n}\n\nvar originalTemplateWith = Blaze._TemplateWith;\nBlaze._TemplateWith = function(arg, contentFunc) {\n  // data is available instantly and if we delayed\n  // things won't work as expected\n\n  if(typeof arg == 'function') {\n    arg = arg();\n  }\n  return originalTemplateWith.call(this, arg, contentFunc);\n};","// Packages and apps add templates on to this object.\nTemplate = Blaze.Template;\n\n// Check for duplicate template names and illegal names that won't work.\nTemplate.__checkName = function (name) {\n  if (name in Template) {\n    if ((Template[name] instanceof Template) && name !== \"body\")\n      throw new Error(\"There are multiple templates named '\" + name + \"'. Each template needs a unique name.\");\n    throw new Error(\"This template name is reserved: \" + name);\n  }\n};\n\n// Define a template `Template.body` that renders its\n// `contentViews`.  `<body>` tags (of which there may be\n// multiple) will have their contents added to it.\nTemplate.body = new Template('body', function () {\n  var parts = Template.body.contentViews;\n  // enable lookup by setting `view.template`\n  for (var i = 0; i < parts.length; i++)\n    parts[i].template = Template.body;\n  return parts;\n});\nTemplate.body.contentViews = []; // array of Blaze.Views\nTemplate.body.view = null;\n\nTemplate.body.addContent = function (renderFunc) {\n  var kind = 'body_content_' + Template.body.contentViews.length;\n\n  Template.body.contentViews.push(Blaze.View(kind, renderFunc));\n};\n\n// This function does not use `this` and so it may be called\n// as `Meteor.startup(Template.body.renderIntoDocument)`.\nTemplate.body.renderToDocument = function () {\n\n};","Template.__dynamic = new Template(\"Template.__dynamic\", function() {\n  var view = this;\n  var template = Spacebars.call(view.lookup(\"template\"));\n  if(!template) {\n    throw new Error('you must specify template argument in UI.dynamic');\n  } else if(!Template[template]) {\n    throw new Error('there is no template defined to include with UI.dynamic: '  + template);\n  }\n\n  var data = Spacebars.call(view.lookup(\"data\"));\n  if(!data) {\n    // get data from the parent\n    data = Spacebars.call(view.lookup)\n  }\n\n  return Blaze._TemplateWith(data, function() {\n    return Spacebars.include(Template[template]);\n  });\n});\n","var format = Npm.require('util').format;\nvar Compilers = {};\nCompilers.html = SpacebarsCompiler;\nif(Package['mquandalle:jade-compiler']) {\n  Compilers.jade = Package['mquandalle:jade-compiler'].JadeCompiler;\n}\n\nSSR = {};\n\nSSR.render = function(templateName, data) {\n  var renderFunc = (data)? Blaze.toHTMLWithData : Blaze.toHTML;\n  var template = (typeof templateName == 'string')?\n    Template[templateName] : templateName;\n\n  return renderFunc(template, data);\n};\n\nSSR.compileTemplate = function(name, content, options) {\n  var language = options && options.language || \"html\";\n  var compiler = Compilers[language];\n  if(!compiler) {\n    throw Error(\"Unknown language: \" + language);\n  }\n\n  var compiled = compiler.compile(content);\n  var templateFmt = \"new Template('%s', function() {var view=this; return %s()})\";\n  var template = format(templateFmt, name, compiled);\n\n  return Template[name] = eval(template);\n};\n"]}